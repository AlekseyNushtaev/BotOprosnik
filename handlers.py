import asyncio
import datetime
from pprint import pprint

from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter, ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated

from bot import bot
from config import ADMIN_IDS
from db.util import add_user_to_db, update_user_credit, update_user_ipoteka, update_user_house, update_user_auto, \
    update_user_sdelki, update_user_pay_credit, update_user_debit, update_user_blocked, update_user_unblocked, \
    get_all_users_unblock, update_user_phone, get_all_users
from keyboard import create_kb, contact_keyboard, kb_button
from spread import get_sheet

router =Router()

#1
#2


class FSMFillForm(StatesGroup):
    get_phone = State()
    send = State()
    text_add_button = State()
    check_text_1 = State()
    check_text_2 = State()
    text_add_button_text = State()
    text_add_button_url = State()
    photo_add_button = State()
    check_photo_1 = State()
    check_photo_2 = State()
    photo_add_button_text = State()
    photo_add_button_url = State()
    video_add_button = State()
    check_video_1 = State()
    check_video_2 = State()
    video_add_button_text = State()
    video_add_button_url = State()
    check_video_note_1 = State()


async def scheduler(time):
    while True:
        await asyncio.sleep(10)
        print(datetime.datetime.now())
        try:
            sheet = await get_sheet()
            sheet.clear()
            user_list = get_all_users()
            sheet.append_rows(user_list)
            print(datetime.datetime.now())
        except Exception as e:
            await bot.send_message(1012882762, str(e))
        await asyncio.sleep(time)


@router.message(CommandStart())
async def process_start_user(message: Message):
    add_user_to_db(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        datetime.datetime.now()
    )
    # await message.answer_video_note('DQACAgIAAxkBAAICCmeOgtXtspSZ2nff7NBPKOadJYUYAALCXAACOT9QSEfiMEII4PH0NgQ')
    await asyncio.sleep(0.3)
    await message.answer(
        text="""
<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç –†—É—Å–ª–∞–Ω–∞ –ê–≤–¥–µ–µ–≤–∞</b>üëãüèª

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ, –±—É–∫–≤–∞–ª—å–Ω–æ, –∑–∞ 1 –º–∏–Ω—É—Ç—É –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é <b>–ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω–∞ –ø–æ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ —á–µ—Ä–µ–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ.</b>

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëáüèª
        """,
        parse_mode=ParseMode.HTML,
        reply_markup=create_kb(1, step_1="‚úÖ–ü—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
    )


@router.callback_query(F.data == 'step_1')
async def step_1(cb: CallbackQuery):
    await cb.message.answer(text="""
–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤ –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ.  
  
‚úÖ –ó–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã –∏ –¥–∞–µ—Ç —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç - –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–∫–æ–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –∏–ª–∏ –ª—É—á—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∏–¥–µ–∏.    
    """)
    await asyncio.sleep(0.3)
    await cb.message.answer(text="""
<b>–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∞—è —É –í–∞—Å –æ–±—â–∞—è —Å—É–º–º–∞ –í–°–ï–• –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –¥–æ–ª–≥–æ–≤?</b>ü§î  
  
–ù—É–∂–Ω–æ —Å–ª–æ–∂–∏—Ç—å –≤–º–µ—Å—Ç–µ: –∫—Ä–µ–¥–∏—Ç—ã, –∏–ø–æ—Ç–µ–∫–∏, –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç—ã, –º–∏–∫—Ä–æ–∑–∞–π–º—ã, –Ω–∞–ª–æ–≥–∏, –ñ–ö–•, –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã.  
  
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æüëá 
        """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_2_no="–ú–µ–Ω–µ–µ 300 —Ç—ã—Å.",
                                                   step_2_1_yes="300-500 —Ç—ã—Å.",
                                                   step_2_2_yes="500 —Ç—ã—Å.- 1 –º–ª–Ω.",
                                                   step_2_3_yes="–ë–æ–ª–µ–µ 1 –º–ª–Ω."
                                                   ))


@router.callback_query(F.data == 'step_2_no')
async def step_2_no(cb: CallbackQuery):
    await cb.message.answer(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –µ—Å–ª–∏ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–æ–ª–≥–∏, –∫—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–π–º—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏, —à—Ç—Ä–∞—Ñ–∞–º–∏ –∏ –ø–µ–Ω—è–º–∏, —Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç <b>–º–µ–Ω–µ–µ 300 —Ç—ã—Å. —Ä—É–±–ª–µ–π?</b>",
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_2_2_no="–î–∞, –º–µ–Ω–µ–µ 300 —Ç—ã—Å.",
                                                   step_2_4_yes="–ë–æ–ª–µ–µ 300 —Ç—ã—Å."
                                                   ))


@router.callback_query(F.data == 'step_2_2_no')
async def step_2_2_no(cb: CallbackQuery):
    update_user_credit(cb.from_user.id, '–º–µ–Ω–µ–µ 300 —Ç—ã—Å.')
    await cb.message.answer(text="""
–í–∞—à–∞ —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.  
  
–ù–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ú–§–¶.    
    """)


@router.callback_query(F.data.in_({'step_2_1_yes', 'step_2_2_yes', 'step_2_3_yes', 'step_2_4_yes'}))
async def step_3(cb: CallbackQuery):
    if F.data == 'step_2_1_yes':
        update_user_credit(cb.from_user.id, '300-500 —Ç—ã—Å.')
    elif F.data == 'step_2_2_yes':
        update_user_credit(cb.from_user.id, '500 —Ç—ã—Å.- 1 –º–ª–Ω.')
    elif F.data == 'step_2_3_yes':
        update_user_credit(cb.from_user.id, '–ë–æ–ª–µ–µ 1 –º–ª–Ω.')
    else:
        update_user_credit(cb.from_user.id, '–ë–æ–ª–µ–µ 300 —Ç—ã—Å.')
    await cb.message.answer(text="""
<b>–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∏–ø–æ—Ç–µ–∫–∞?</b>  
  
–ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–∞–µ–º—â–∏–∫–æ–º –ø–æ –∏–ø–æ—Ç–µ–∫–µ?  
    """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_3_1="–ù–µ—Ç –∏–ø–æ—Ç–µ–∫–∏‚õîÔ∏è",
                                                   step_3_2="–ï—Å—Ç—å –∏–ø–æ—Ç–µ–∫–∞‚úÖ",
                                                   step_3_3="–Ø —Å–æ–∑–∞–µ–º—â–∏–∫üôãüèª‚Äç‚ôÇÔ∏è",
                            ))


@router.callback_query(F.data.in_({'step_3_1', 'step_3_2', 'step_3_3'}))
async def step_4(cb: CallbackQuery):
    if F.data == 'step_3_1':
        update_user_ipoteka(cb.from_user.id, '–ù–µ—Ç –∏–ø–æ—Ç–µ–∫–∏')
    elif F.data == 'step_3_2':
        update_user_ipoteka(cb.from_user.id, '–ï—Å—Ç—å –∏–ø–æ—Ç–µ–∫–∞')
    else:
        update_user_ipoteka(cb.from_user.id, '–Ø —Å–æ–∑–∞–µ–º—â–∏–∫')
    await cb.message.answer(text="""
–¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –≤–∞—à–∏–º –∏–º—É—â–µ—Å—Ç–≤–æ–º. –ù–∞—á–Ω–µ–º —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏üè†  
  
<b>–ö–∞–∫–æ–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—Å?</b>
    """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_4_1="–ù–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                                                   step_4_2="–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ",
                                                   step_4_many="–ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤üèò",
                                                   ))


@router.callback_query(F.data == 'step_4_many')
async def step_4_no(cb: CallbackQuery):
    await cb.message.answer(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –í–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏?",
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_4_4_no="–î–∞, –Ω–µ—Å–∫–æ–ª—å–∫–æ",
                                                   step_4_2="–¢–æ–ª—å–∫–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ"
                                                   ))


@router.callback_query(F.data == 'step_4_4_no')
async def step_4_4_no(cb: CallbackQuery):
    update_user_house(cb.from_user.id, '–ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')
    await cb.message.answer(text="""
–ï—Å–ª–∏ —É –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Ç–æ–≥–¥–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–∞–º –Ω–µ –≤—ã–≥–æ–¥–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ.  
  
–î—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–æ–¥–∞–Ω—ã —Å —Ç–æ—Ä–≥–æ–≤ –ø—Ä–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ. 
  
–ù–æ –µ—Å–ª–∏ –≤–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è –∏–Ω–¥–∏–≤–∏–≤–¥—É–ª—å–Ω–∞—è –∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ, —Ç–æ –ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º–Ω–µ –≤ –ª–∏—á–∫—É.  
  
–ú–æ–π –ª–∏—á–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º @urist_ruslanavdeev    
    """)


@router.callback_query(F.data.in_({'step_4_1', 'step_4_2'}))
async def step_5(cb: CallbackQuery):
    if F.data == 'step_4_1':
        update_user_house(cb.from_user.id, '–ù–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')
    else:
        update_user_house(cb.from_user.id, '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∂–∏–ª—å–µ')
    await cb.message.answer(text="""
–¢–µ–ø–µ—Ä—å –∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º...

<b>–ù–∞ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å?</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç.
    """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_5_1="–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                                                   step_5_2="–ï—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–Ω–µ–µ 300 —Ç—ã—Å.",
                                                   step_5_3="–ï—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª–µ–µ 300 —Ç—ã—Å.",
                                                   ))


@router.callback_query(F.data.in_({'step_5_1', 'step_5_2', 'step_5_3'}))
async def step_6(cb: CallbackQuery):
    if F.data == 'step_5_1':
        update_user_auto(cb.from_user.id, '–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
    elif F.data == 'step_5_2':
        update_user_auto(cb.from_user.id, '–ï—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–Ω–µ–µ 300 —Ç—ã—Å.')
    else:
        update_user_auto(cb.from_user.id, '–ï—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª–µ–µ 300 —Ç—ã—Å.')
    await cb.message.answer(text="""
<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≥–æ–¥–∞ —É –≤–∞—Å –±—ã–ª–∏ —Å–¥–µ–ª–∫–∏ —Å –∏–º—É—â–µ—Å—Ç–≤–æ–º?</b>  
  
–ù–∞–ø—Ä–∏–º–µ—Ä - –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞, –¥–∞—Ä–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
    """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_6_1="–î–∞, –±—ã–ª–∏ —Å–¥–µ–ª–∫–∏",
                                                   step_6_2="–ù–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫",
                                                   ))


@router.callback_query(F.data.in_({'step_6_1', 'step_6_2'}))
async def step_7(cb: CallbackQuery):
    if F.data == 'step_6_1':
        update_user_sdelki(cb.from_user.id, '–î–∞, –±—ã–ª–∏ —Å–¥–µ–ª–∫–∏')
    else:
        update_user_sdelki(cb.from_user.id, '–ù–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫')
    await cb.message.answer(text="""
–ö–∞–∫–æ–π —É –í–∞—Å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –≤—Å–µ–º –∫—Ä–µ–¥–∏—Ç–∞–º, –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –∫–∞—Ä—Ç–∞–º, –º–∏–∫—Ä–æ–∑–∞–π–º–∞–º –∏ –∏–Ω—ã–º –¥–æ–ª–≥–∞–º?
    """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_7_1="–î–æ 10 —Ç—ã—Å. —Ä—É–±",
                                                   step_7_2="–æ—Ç 10 –¥–æ 20 —Ç—ã—Å. —Ä—É–±",
                                                   step_7_3="–æ—Ç 20 –¥–æ 30 —Ç—ã—Å. —Ä—É–±",
                                                   step_7_4="–æ—Ç 30 –¥–æ 50 —Ç—ã—Å. —Ä—É–±",
                                                   step_7_5="–ë–æ–ª–µ–µ 50 —Ç—ã—Å. —Ä—É–±"
                                                   ))


@router.callback_query(F.data.in_({'step_7_1', 'step_7_2', 'step_7_3', 'step_7_4', 'step_7_5'}))
async def step_8(cb: CallbackQuery):
    if F.data == 'step_7_1':
        update_user_pay_credit(cb.from_user.id, '–î–æ 10 —Ç—ã—Å. —Ä—É–±')
    elif F.data == 'step_7_2':
        update_user_pay_credit(cb.from_user.id, '–æ—Ç 10 –¥–æ 20 —Ç—ã—Å. —Ä—É–±')
    elif F.data == 'step_7_3':
        update_user_pay_credit(cb.from_user.id, '–æ—Ç 20 –¥–æ 30 —Ç—ã—Å. —Ä—É–±')
    elif F.data == 'step_7_4':
        update_user_pay_credit(cb.from_user.id, '–æ—Ç 30 –¥–æ 50 —Ç—ã—Å. —Ä—É–±')
    else:
        update_user_pay_credit(cb.from_user.id, '–ë–æ–ª–µ–µ 50 —Ç—ã—Å. —Ä—É–±')
    await cb.message.answer(text="""
<b>–ò –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!</b>  
–ö–∞–∫–æ–π —É –í–∞—Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥?
    """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=create_kb(1,
                                                   step_8_1="–ù–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞",
                                                   step_8_2="–î–æ 10 —Ç—ã—Å. —Ä—É–±",
                                                   step_8_3="–æ—Ç 10 –¥–æ 20 —Ç—ã—Å. —Ä—É–±",
                                                   step_8_4="–æ—Ç 20 –¥–æ 40 —Ç—ã—Å. —Ä—É–±",
                                                   step_8_5="–ë–æ–ª–µ–µ 40 —Ç—ã—Å. —Ä—É–±"
                                                   ))


@router.callback_query(F.data.in_({'step_8_1', 'step_8_2', 'step_8_3', 'step_8_4', 'step_8_5'}), StateFilter(default_state))
async def step_9(cb: CallbackQuery, state: FSMContext):
    if F.data == 'step_8_1':
        update_user_debit(cb.from_user.id, '–ù–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞')
    elif F.data == 'step_8_2':
        update_user_debit(cb.from_user.id, '–î–æ 10 —Ç—ã—Å. —Ä—É–±')
    elif F.data == 'step_8_3':
        update_user_debit(cb.from_user.id, '–æ—Ç 10 –¥–æ 20 —Ç—ã—Å. —Ä—É–±')
    elif F.data == 'step_8_4':
        update_user_debit(cb.from_user.id, '–æ—Ç 20 –¥–æ 40 —Ç—ã—Å. —Ä—É–±')
    else:
        update_user_debit(cb.from_user.id, '–ë–æ–ª–µ–µ 40 —Ç—ã—Å. —Ä—É–±')
    await cb.message.answer('–ü—Ä–æ–≤–µ—Ä—è–µ–º –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...')
    await asyncio.sleep(2)
    #await cb.message.answer_video_note()
    await cb.message.answer(text="""
<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—éüî• –í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!</b> 
  
–í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 99% –º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –¥–æ–ª–≥–∏ ‚úÖ  
  
–ü–æ—á–µ–º—É –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ? 
  
–≠—Ç–æ—Ç –º–∏–Ω–∏-—Ç–µ—Å—Ç —É—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Ç–æ–ª—å–∫–æ 30% –ª—é–¥–µ–π –¥–æ—Ö–æ–¥—è—Ç –¥–æ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–º –ø–æ–¥—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤!
    """,
                            parse_mode=ParseMode.HTML)
    await cb.message.answer(text="""
<b>–ü—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ—é —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.</b>  
  
–ù–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —è –õ–ò–ß–ù–û –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –í–∞—à–µ –¥–µ–ª–æ –∏ —Å–º–æ–≥—É –¥–∞—Ç—å —É–∂–µ 100% –≥–∞—Ä–∞–Ω—Ç–∏—é —Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤ –∏ –≥–ª–∞–≤–Ω–æ–µ —Å–º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –∏–º–µ–Ω–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ.  
  
–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å +7 –∏–ª–∏ —Å 8 –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚¨áÔ∏è
        """,
                            parse_mode=ParseMode.HTML,
                            reply_markup=await contact_keyboard())
    await state.set_state(FSMFillForm.get_phone)


@router.message(F.text, StateFilter(FSMFillForm.get_phone))
async def get_phone_text(message: types.Message, state: FSMContext):
    phone = str(message.text)
    update_user_phone(message.from_user.id, phone)
    await message.answer(text="""
<b>–°–ø–∞—Å–∏–±–æ!</b>  
  
–°–∫–æ—Ä–æ —è –Ω–∞–ø–∏—à—É –≤–∞–º –Ω–∞ WhatsApp –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –æ–± —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ü§ù  
  
–ó–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —è –º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è 7777777777
            """,
                         parse_mode=ParseMode.HTML)
    await state.set_state(default_state)


@router.message(F.contact, StateFilter(FSMFillForm.get_phone))
async def get_phone_contact(message: types.Message, state: FSMContext):
    phone = str(message.contact.phone_number)
    update_user_phone(message.from_user.id, phone)
    await message.answer(text="""
<b>–°–ø–∞—Å–∏–±–æ!</b>  

–°–∫–æ—Ä–æ —è –Ω–∞–ø–∏—à—É –≤–∞–º –Ω–∞ WhatsApp –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –æ–± —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ü§ù  

–ó–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —è –º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è 77777777777
            """,
                         parse_mode=ParseMode.HTML)
    await state.set_state(default_state)


#–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏


@router.message(F.text == 'Send', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_all(message: types.Message, state: FSMContext):
    await message.answer(text='–°–µ–π—á–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —é–∑–µ—Ä–∞–º!\n'
                              '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∂–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫')
    await state.set_state(FSMFillForm.send)


#–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.text, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.text_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await cb.message.answer(text=dct['text'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_text_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_1), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text=dct['text'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.text_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.text_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        await message.answer(text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_text_2)
    except Exception:
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.text_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.photo, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.photo_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    pprint(dct)
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_photo(photo=dct['photo_id'], caption=dct['caption'])
    else:
        await cb.message.answer_photo(photo=dct['photo_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_photo_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_1), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'])
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.photo_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.photo_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_photo(photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_photo(photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_photo_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.photo_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                    await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
            FSMFillForm.check_photo_1, FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.video, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button(message: types.Message, state: FSMContext):
    await state.update_data(video_id=message.video.file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.video_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    pprint(dct)
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_video(video=dct['video_id'], caption=dct['caption'])
    else:
        await cb.message.answer_video(video=dct['video_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'])
            else:
                await bot.send_video(user_id, video=dct['video_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.video_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.video_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_video(video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_video(video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_video_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.video_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_2), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_video(user_id, photo=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞


@router.message(F.video_note, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_note_check(message: types.Message, state: FSMContext):
    await state.update_data(video_note_id=message.video_note.file_id)
    await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –∫—Ä—É–∂–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_note_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_note_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_video_note(user_id, video_note=dct['video_note_id'])
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
                       FSMFillForm.check_photo_1, FSMFillForm.check_photo_2, FSMFillForm.check_video_1,
                       FSMFillForm.check_video_2, FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–†—É—á–∫–∏ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    update_user_blocked(event.from_user.id)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    update_user_unblocked(event.from_user.id)


@router.message(F.video_note, F.from_user.id.in_(ADMIN_IDS))
async def get_note(message: types.Message):
    print(message.video_note.file_id)
